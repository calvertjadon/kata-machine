export default class LRU<K, V> {
    private length: number;

    constructor() {

    }

    update(key: K, value: V): void {

        // does it exist?
        // get()


        // if not, insert
        // - check capacity and evict if over


        // if does, update to front of list and update value
    }

    get(key: K): V | undefined {

        // check the cache for existence


        // update the value we found and move it to the front


        // return out the value found or undefined if not exists
    }
}
